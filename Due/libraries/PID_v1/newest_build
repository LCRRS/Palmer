#include <PID_v1.h>
#include <Servo.h>
#include <I2Cdev.h>
#include <MPU6050_6Axis_MotionApps20.h>

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

#define MAX_SIGNAL 2000
#define MIN_SIGNAL 800

#define OUTPUT_READABLE_YAWPITCHROLL

#define LOOPTIME 100

MPU6050 mpu;

Servo myservo1;
Servo myservo2;
Servo myservo3;
Servo myservo4;

double speed_myservo1, speed_myservo2, speed_myservo3, speed_myservo4;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];   

bool initiation_count = false; // used to initiate motor start/warmup routine inside the loop function only once
bool gyro_stable = true; // if gyroscope is stable, it allows the readings to be used for interrupts

int old_ypr0; // comparison value used to check whether the gyroscope is stable
int old_ypr1; // comparison value used to check whether the gyroscope is stable
int old_ypr2; // comparison value used to check whether the gyroscope is stable

// Once stable the gyroscope readings will be taken as zero references

float zero_ypr0;
float zero_ypr1;
float zero_ypr2;

int increase_count = 0;

int cycle_count = 0; // used to count how many gyroscope readings were taken. Is used to check the stability of gyroscope

/*=================================================
================= PID CONTROLLER ================*/

double pid_input, pid_output, pid_setPoint = 0;
double Kp = 4, Ki = 0.0, Kd = 3.0;

int repetitions = 0;
int rotations = 0;
int rotations1 = 0;
bool repetitions_value = false;
bool pass_value = false;

float average;
float total = 0;

unsigned long lastMillis = 0;

double lower_limit = 0;
double upper_limit = 200;

PID myPID(&pid_input, &pid_output, &pid_setPoint, Kp, Ki, Kd, DIRECT);

void warmup()
{
	myPID.SetOutputLimits(lower_limit, upper_limit);
	myPID.SetSampleTime(20);

    while (!initiation_count)
    {
        for (int speed = 800; speed < 1500; speed++)
        {
            setSpeed(speed);
            delay(50);
        }
        initiation_count = true;
    }	
}

// Set Speed Function used to set speed on four motors simultaneously

void setSpeed(int speed)
{
    int angle = speed;
    myservo1.writeMicroseconds(angle);
    myservo2.writeMicroseconds(angle); 
    myservo3.writeMicroseconds(angle);
    myservo4.writeMicroseconds(angle); 
}

// Individual Set Speed function used to set speed of individual motors
// Has to be used in the implementation of stabilization routine

void indivSpeed(Servo servo, int speed)
{
    int angle = speed;
    servo.writeMicroseconds(angle);
}

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() 
{
    mpuInterrupt = true;
}

/*=================================================================
=====                      INITIAL SETUP                      =====
=================================================================*/

void setup() 
{
    Serial.begin(115200);
    pid_input = (ypr[1] * 180/M_PI);

    myservo1.attach(9);
    myservo2.attach(10);
    myservo3.attach(11);
    myservo4.attach(12);
     
    Serial.println("Now writing maximum output.");
    myservo1.writeMicroseconds(MAX_SIGNAL);
    myservo2.writeMicroseconds(MAX_SIGNAL);
    myservo3.writeMicroseconds(MAX_SIGNAL);
    myservo4.writeMicroseconds(MAX_SIGNAL);
 
    Serial.println("Sending minimum output");
    myservo1.writeMicroseconds(MIN_SIGNAL);
    myservo2.writeMicroseconds(MIN_SIGNAL);
    myservo3.writeMicroseconds(MIN_SIGNAL);
    myservo4.writeMicroseconds(MIN_SIGNAL);
    delay(2000);

    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    while (!Serial); 

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(-229);
    mpu.setYGyroOffset(12);
    mpu.setZGyroOffset(43);
    mpu.setZAccelOffset(1733); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) 
    {
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.println(F("Enabling interrupt detection (Arduino external interrupt 0)..."));

        attachInterrupt(0, dmpDataReady, RISING);

        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } 

    else 
    {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }

    myPID.SetMode(AUTOMATIC);
}

void loop() {
	warmup();

    // if programming failed, don't try to do anything
    if (!dmpReady) return;

    // wait for MPU interrupt or extra packet(s) available
    if (!mpuInterrupt && fifoCount < packetSize) 
    {
        if (!gyro_stable)
        {

            /*=============================================
            ======          AIR STABILIZATION        ======
            =============================================*/
            if ((ypr[1] * 180/M_PI) < -0.5)
            { 
                pid_input = ((ypr[1]) * 180/M_PI);
                myPID.Compute();
                speed_myservo1 = 1500;
                speed_myservo3 = 1500;
				speed_myservo1 =  speed_myservo1 + pid_output;
				speed_myservo3 = speed_myservo3 - pid_output;
				indivSpeed(myservo1, speed_myservo1);
				indivSpeed(myservo3, speed_myservo3);
				Serial.println(pid_output);
            }  
            if ((ypr[1] * 180/M_PI) > 0.5)
            { 
                pid_input = -((ypr[1]) * 180/M_PI);
                myPID.Compute();
                speed_myservo1 = 1500;
                speed_myservo3 = 1500;
				speed_myservo1 = speed_myservo1 - pid_output;
				speed_myservo3 = speed_myservo3 + pid_output;
				indivSpeed(myservo1, speed_myservo1);
				indivSpeed(myservo3, speed_myservo3);
				Serial.println(pid_output);
            }                
        }
    }  

    // reset interrupt flag and get INT_STATUS byte
    mpuInterrupt = false;
    mpuIntStatus = mpu.getIntStatus();

    // get current FIFO count
    fifoCount = mpu.getFIFOCount();

    // check for overflow (this should never happen unless our code is too inefficient)
    if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
        // reset so we can continue cleanly
        mpu.resetFIFO();
        Serial.println(F("FIFO overflow!"));

    // otherwise, check for DMP data ready interrupt (this should happen frequently)
    } else if (mpuIntStatus & 0x02) {
        // wait for correct available data length, should be a VERY short wait
        while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();

        // read a packet from FIFO
        mpu.getFIFOBytes(fifoBuffer, packetSize);
        
        // track FIFO count here in case there is > 1 packet available
        // (this lets us immediately read more without waiting for an interrupt)
        fifoCount -= packetSize;

        #ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
            Serial.print("ypr\t");
            Serial.print(ypr[0] * 180/M_PI);
            Serial.print("\t");
            Serial.print(ypr[1] * 180/M_PI);
            Serial.print("\t");
            Serial.println(ypr[2] * 180/M_PI);
        #endif
    }

    /*=========================================================
    ======              GYROSCOPE VERIFICATION          =======
    =========================================================*/

    if (cycle_count < 200)
    {
        cycle_count = cycle_count + 1;
    }

    if (cycle_count == 100)
    {
        old_ypr0 = int (ypr[0] * 180/M_PI);
        old_ypr1 = int (ypr[1] * 180/M_PI);
        old_ypr2 = int (ypr[2] * 180/M_PI);
    }

    if (cycle_count == 200)
    {
        if (old_ypr1 - int (ypr[1] * 180/M_PI) == 0 && old_ypr2 - int (ypr[2] * 180/M_PI) == 0)
        {
            gyro_stable = false;
            zero_ypr0 = (ypr[0] * 180/M_PI);
            zero_ypr1 = (ypr[1] * 180/M_PI);
            zero_ypr2 = (ypr[2] * 180/M_PI);
            cycle_count = cycle_count + 1;
            Serial.println("gyro_stable = true");
        }

        else
        {
            cycle_count = 0;
        }
    }
}